#!/bin/sh

# Hook commit-msg para SICAF
# Valida mensajes de commit usando Conventional Commits con reglas espec√≠ficas del proyecto

echo "üîç Validando mensaje de commit..."

# Obtener el mensaje del commit
commit_msg_file="$1"
commit_msg=$(cat "$commit_msg_file")

# Configuraci√≥n
readonly TIPOS_VALIDOS="feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert|hotfix"
readonly AMBITOS_CAPAS="web|business|data|services|common"
readonly AMBITOS_FUNCIONALES="auth|academic|admin|account|grades|users|roles|reports|security|config|db|ui|api"
readonly AMBITOS_VALIDOS="$AMBITOS_CAPAS|$AMBITOS_FUNCIONALES"

# Funci√≥n para mostrar errores
mostrar_error() {
    echo "‚ùå Error: $1"
}

# Funci√≥n para mostrar √©xito
mostrar_exito() {
    echo "‚úÖ $1"
}

# Funci√≥n para mostrar informaci√≥n
mostrar_info() {
    echo "‚ÑπÔ∏è  $1"
}

# Funci√≥n para mostrar ejemplos
mostrar_ejemplos() {
    echo "üìã Ejemplos v√°lidos:"
    echo "  feat(auth): implementar autenticaci√≥n JWT #123"
    echo "  fix(grades): corregir c√°lculo de promedio #456"
    echo "  docs(readme): actualizar instrucciones de instalaci√≥n #789"
    echo "  refactor(data,business): reestructurar repositorios #321"
    echo "  test(services): agregar pruebas unitarias para EmailService #654"
    echo "  chore(web): actualizar dependencias de npm #987"
}

# Funci√≥n para mostrar formato esperado
mostrar_formato() {
    echo "üìù Formato esperado:"
    echo "  <tipo>(<√°mbito>): <descripci√≥n> #<n√∫mero-tarea>"
    echo ""
    echo "üìÇ Tipos v√°lidos:"
    echo "  feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert, hotfix"
    echo ""
    echo "üéØ √Åmbitos v√°lidos:"
    echo "  Capas: web, business, data, services, common"
    echo "  Funcionales: auth, academic, admin, account, grades, users, roles, reports, security, config, db, ui, api"
}

# Validar que el mensaje no est√© vac√≠o
if [ -z "$commit_msg" ] || [ "$commit_msg" = " " ]; then
    mostrar_error "El mensaje del commit no puede estar vac√≠o"
    exit 1
fi

# Validar longitud m√≠nima y m√°xima
msg_length=${#commit_msg}
if [ $msg_length -lt 10 ]; then
    mostrar_error "El mensaje es demasiado corto (m√≠nimo 10 caracteres)"
    mostrar_formato
    exit 1
fi

if [ $msg_length -gt 1000 ]; then
    mostrar_error "El mensaje es demasiado largo (m√°ximo 1000 caracteres)"
    mostrar_info "Considera usar el cuerpo del commit para detalles adicionales"
    exit 1
fi

# Patr√≥n principal para Conventional Commits
commit_pattern="^($TIPOS_VALIDOS)(\(([a-zA-Z0-9,-]+)\))?: .+ #[0-9]+$"

if ! echo "$commit_msg" | grep -qE "$commit_pattern"; then
    mostrar_error "El mensaje no sigue el formato de Conventional Commits"
    mostrar_formato
    echo ""
    mostrar_ejemplos
    exit 1
fi

# Extraer componentes del mensaje
tipo=$(echo "$commit_msg" | sed -n 's/^\([^(]*\).*/\1/p')
ambito=$(echo "$commit_msg" | sed -n 's/^[^(]*(\([^)]*\)).*/\1/p')
descripcion=$(echo "$commit_msg" | sed -n 's/^[^:]*: \([^#]*\).*/\1/p' | sed 's/[[:space:]]*$//')
tarea=$(echo "$commit_msg" | sed -n 's/.*#\([0-9]*\).*/\1/p')

# Validar tipo
if ! echo "$tipo" | grep -qE "^($TIPOS_VALIDOS)$"; then
    mostrar_error "Tipo '$tipo' no es v√°lido"
    mostrar_info "Tipos v√°lidos: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert, hotfix"
    exit 1
fi

# Validar √°mbito si est√° presente
if [ ! -z "$ambito" ]; then
    # Dividir √°mbitos por coma y validar cada uno
    IFS=',' 
    for individual_scope in $ambito; do
        # Eliminar espacios en blanco
        cleaned_scope=$(echo "$individual_scope" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        
        if ! echo "$cleaned_scope" | grep -qE "^($AMBITOS_VALIDOS)$"; then
            mostrar_error "El √°mbito '$cleaned_scope' no es v√°lido"
            mostrar_info "√Åmbitos v√°lidos:"
            mostrar_info "  Capas: $AMBITOS_CAPAS"
            mostrar_info "  Funcionales: $AMBITOS_FUNCIONALES"
            exit 1
        fi
    done
    unset IFS
fi

# Validar descripci√≥n
if [ -z "$descripcion" ]; then
    mostrar_error "La descripci√≥n no puede estar vac√≠a"
    exit 1
fi

# La descripci√≥n no debe terminar con punto
if echo "$descripcion" | grep -q '\.$'; then
    mostrar_error "La descripci√≥n no debe terminar con punto"
    exit 1
fi

# Validar n√∫mero de tarea
if [ -z "$tarea" ]; then
    mostrar_error "Debe incluir una referencia a tarea (ejemplo: #123)"
    exit 1
fi

if [ ${#tarea} -lt 1 ] || [ ${#tarea} -gt 6 ]; then
    mostrar_error "El n√∫mero de tarea debe tener entre 1 y 6 d√≠gitos"
    exit 1
fi

# Validaciones espec√≠ficas por tipo
case "$tipo" in
    "feat")
        if [ -z "$ambito" ]; then
            mostrar_error "Las nuevas caracter√≠sticas (feat) deben incluir un √°mbito"
            exit 1
        fi
        ;;
    "fix")
        if [ -z "$ambito" ]; then
            mostrar_error "Las correcciones (fix) deben incluir un √°mbito"
            exit 1
        fi
        ;;
    "hotfix")
        if ! echo "$descripcion" | grep -qi "urgent\|critical\|security\|production"; then
            mostrar_error "Los hotfix deben indicar urgencia (urgent, critical, security, production)"
            exit 1
        fi
        ;;
esac

# Validar palabras prohibidas en la descripci√≥n
palabras_prohibidas="WIP|wip|TODO|todo|FIXME|fixme|XXX|xxx|HACK|hack"
if echo "$descripcion" | grep -qE "($palabras_prohibidas)"; then
    mostrar_error "La descripci√≥n contiene palabras prohibidas: $palabras_prohibidas"
    mostrar_info "Los commits deben representar trabajo completado"
    exit 1
fi

# Todo validado correctamente
mostrar_exito "Mensaje de commit v√°lido"
mostrar_info "Tipo: $tipo | √Åmbito: ${ambito:-'ninguno'} | Tarea: #$tarea"

exit 0